// –∑–∞–≥–ª—É—à–∫–∏
window.haptic = window.haptic || function(){try{navigator.vibrate && navigator.vibrate(12)}catch(e){}}
window.toast  = window.toast  || function(msg){try{console.log('[toast]', msg)}catch(e){}}
window.bling  = window.bling  || function(btn){try{btn&&btn.classList&&btn.classList.toggle('primary'); if(typeof toast==='function'){toast('‚ú®')}}catch(e){}}
window.confetti = window.confetti || function(){}

/* ===== helpers ===== */
const $ = s => document.querySelector(s);
function notify(text){ const el=document.createElement('div'); el.textContent=text; el.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:26px;background:linear-gradient(90deg,var(--accent),var(--accent2));color:#031018;padding:10px 14px;border-radius:999px;font-weight:900;box-shadow:0 10px 24px rgba(0,0,0,.35);z-index:9999;transition:opacity .3s'; document.body.appendChild(el); setTimeout(()=>el.style.opacity='0',1800); setTimeout(()=>el.remove(),2200); }
const toast = notify;
const LS = window.LS || { set(k,v){try{localStorage.setItem(k,JSON.stringify(v))}catch(e){}}, get(k,def){try{const v=JSON.parse(localStorage.getItem(k));return v==null?def:v}catch(e){return def}} };

/* ===== SKY: —Ç–æ–ª—å–∫–æ –∫–æ—Ç–∏–∫–∏ ===== */
const sky = $('#sky');
const emojis = ['üê±','üò∫','üòª','üòπ','üôÄ','üêà'];
let catsTimer=null; let catsDelay = LS.get('ki_cats_density', 260);

function animateFaller(el){
  const start=performance.now(); const dur=4000+Math.random()*3000; const rot=(Math.random()*360)|0;
  function tick(t){ const p=Math.min(1,(t-start)/dur); const y=p*(window.innerHeight+100); el.style.transform=`translateY(${y}px) rotate(${rot*p}deg)`; if(p<1) requestAnimationFrame(tick); else el.remove(); }
  requestAnimationFrame(tick);
}
function dropEmoji(){
  const el=document.createElement('div'); el.className='cat';
  el.textContent=emojis[(Math.random()*emojis.length)|0];
  el.style.left=Math.random()*100+'vw'; el.style.top='-40px';
  sky.appendChild(el); animateFaller(el); playSfx();
}
function startCats(){ if(!catsTimer){ catsTimer=setInterval(dropEmoji, catsDelay); } }
function stopCats(){ if(catsTimer){ clearInterval(catsTimer); catsTimer=null; } }

/* ===== TICKER ===== */
const tickData = [['KatyaCoin','+200%','up'],['IndiraNFT','‚àí7 —Å–º–µ—à–∏–Ω–æ–∫','down'],['LOL-ETF','+69%','up'],['Meme100','to the moon','up'],['GiggleBond','—Å—Ç–∞–±–∏–ª—å–Ω–æ —Ö–∞-—Ö–∞','up'],['CringeFutures','–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ','down'],['HaHaDAO','ATH!','up'],['SmileSwap','–∞–ø—Ä—É–≤ üôÇ','up']];
const ticker = $('#ticker');
(function buildTicker(){
  const row=document.createElement('div'); row.style.display='flex'; row.style.gap='24px'; row.style.paddingRight='24px';
  tickData.concat(tickData).forEach(([n,v,d])=>{ const el=document.createElement('div'); el.className='tick '+(d==='up'?'up':'down'); el.innerHTML=`<span>üìä</span><span>${n}</span><span>${v}</span>`; row.appendChild(el); });
  ticker.appendChild(row);
})();

/* ===== SLOGANS & CAPTIONS ===== */
const slogans = ['–î–æ–ª–∏—Å—Ç–∞–ª–∏—Å—å –¥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–º–µ—Ö–∞','–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ —à—É—Ç–æ–∫ —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ –∫–æ—Ñ–µ–∏–Ω–∞','–£–ª—ã–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É','–ü–æ—Ä—Ç—Ñ–µ–ª—å –º–µ–º–æ–≤ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω','–õ–æ–ª-–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞','–í–∞–Ω–∏–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üç¶'];
const sloganEl = $('#slogan'); let sIdx=0; setInterval(()=>{ sIdx=(sIdx+1)%slogans.length; if(sloganEl) sloganEl.textContent=slogans[sIdx]; }, 3500);

const captions = [
  '–î–æ–ª–∏—Å—Ç–∞–ª–∏—Å—å –¥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–º–µ—Ö–∞',
  '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ —à—É—Ç–æ–∫ —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ –∫–æ—Ñ–µ–∏–Ω–∞',
  '–£–ª—ã–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É',
  '–ü–æ—Ä—Ç—Ñ–µ–ª—å –º–µ–º–æ–≤ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
  '–õ–æ–ª-–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞',
  '–í–∞–Ω–∏–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üç¶',
  '–°–º–µ—Ö-–±–∞–Ω–∫: –¥–µ–ø–æ–∑–∏—Ç –≤ —Å–º–µ—à–∏–Ω–∫–∏',
  '–°–∏–Ω–µ—Ä–≥–∏—è —Ä–æ—Ñ–ª–æ–≤: +100 –∫ –∫–∞—Ä–º–µ',
  '–ò–Ω—Å–∞–π–¥: –∑–∞–≤—Ç—Ä–∞ —Å–º–µ—à–Ω–µ–µ, —á–µ–º —Å–µ–≥–æ–¥–Ω—è',
  '–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å? –•–∞-—Ö–∞-—Ö–∞ ‚Äî —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ',
  '–î–µ–ª—å—Ç–∞-—É–ª—ã–±–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, gamma ‚Äî —Ç–æ–∂–µ üòâ',
  '–ù–∞—à KPI: —Ö–æ—Ö–æ—Ç –¥–æ —Å–ª—ë–∑',
  'Buy the dip? Buy the meme!',
  'APY –ø–æ —Ö–∏—Ö–∏–∫–∞–Ω—å—é: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å %',
  '–°—Ç–æ–ø-–ª–æ—Å—Å ‚Äî –Ω–∞ —É—Ä–æ–≤–Ω–µ ¬´–µ—â—ë –ø–æ –æ–¥–Ω–æ–π¬ª',
  '–¢–µ–∑–µ—Ä–∏–º —à—É—Ç–∫–∏, —Å—Ç–µ–π–∫–∞–µ–º –ª–∞–π–∫–∏',
  '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–æ—Ñ–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–º –∫–æ—Ç–∏–∫–æ–≤',
  '–ú–µ–º–æ–≤–µ—Ä—Å —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è: to the meow üåú',
  '–ü—Ä–µ–º–∏—è –∑–∞ —Ä–∏—Å–∫ ‚Äî –≤ –∫–æ—Ç–∞—Ö',
  '–°–∞—Ä–∫–∞–∑–º ‚Äî –Ω–∞—à –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤',
  '–î–∏–≤–∏–¥–µ–Ω–¥—ã –≤ –≤–∏–¥–µ ¬´–∞—Ö–∞—Ö–∞¬ª',
  '–õ–µ–Ω–Ω –∞–ø ‚Äî –∏—Ä–æ–Ω–∏—è, —Å–∞—Ä–∫–∞–∑–º, —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è',
  '–ú–∞—Ä–∂–∏–Ω-–∫–æ–ª–ª? –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑ —Å–º–∞–π–ª–∞ –Ω–µ–ª—å–∑—è üòº',
  'HODL: Hold On, Drop Laugh',
  '–°–º–µ—à–Ω–æ–π –∫—ç—à-—Ñ–ª–æ—É: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π',
  '–ù–∞—à–µ ESG: –ï–º –°–º–µ—Ç–∞–Ω—É, –ì–ª–∞–∂—É-–∫–æ—Ç–æ–≤',
  '–ë–µ—Ç–∞ –∫ —Ä—ã–Ω–∫—É —É–Ω—ã–Ω–∏—è ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è',
  '–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –º–∏–º–∏–º–∏',
  '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª –æ—Ç —Å–ª–æ–≤–∞ ¬´—Ñ–∞–Ω¬ª',
  '–í—Ö–æ–¥ –ø–æ —Ä—ã–Ω–∫—É: ¬´–µ—â—ë –æ–¥–∏–Ω –º–µ–º!¬ª',
  'Reinvest laughter, repeat',
  '–ù–∞–ª–æ–≥ –Ω–∞ —Ä–æ—Å–∫–æ—à—å: —É–ª—ã–±–∫–∞ —à–∏—Ä–µ',
  '–°–Ω–∏–∂–∞–µ–º —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–æ—Ç—è—Ç–∞–º–∏',
  '–ù–æ—Ä–º–∏—Ä—É–µ–º —é–º–æ—Ä: –ø–æ –ì–û–°–¢ —Ä–∂–æ–º–±–∞-2025',
  '–ò–Ω–¥–µ–∫—Å —Å—á–∞—Å—Ç—å—è –∑–∞–∫—Ä—ã—Ç –∑–µ–ª—ë–Ω—ã–º',
  '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–±—Ä–æ—Ç—ã'
];
const memeInput=$('#memeInput'), memeText=$('#memeText');
function applyCaption(text){ if(!memeText||!memeInput) return; memeText.textContent='¬´'+text.replace(/\"/g,'‚Äú')+'¬ª'; memeInput.value=text; LS.set('ki_caption',text); }
$('#applyCaption')?.addEventListener('click',()=>{ applyCaption(memeInput.value||''); toast('–ü–æ–¥–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞'); });
$('#randCaption')?.addEventListener('click',()=>applyCaption(captions[(Math.random()*captions.length)|0]));
$('#randCaption2')?.addEventListener('click',()=>applyCaption(captions[(Math.random()*captions.length)|0]));
const savedCap=LS.get('ki_caption',null); if(savedCap) applyCaption(savedCap);

/* ===== IMAGE INPUTS ===== */
function bindImageInput(imgId,fileId){
  const img=document.getElementById(imgId), input=document.getElementById(fileId);
  if(!img||!input) return;
  img.addEventListener('click',()=>input.click());
  img.addEventListener('keydown',e=>{ if(e.key==='Enter'||e.key===' ') input.click(); });
  input.addEventListener('change',e=>{
    const f=e.target.files?.[0]; if(!f) return;
    const r=new FileReader(); r.onload=()=>img.src=r.result; r.readAsDataURL(f);
  });
}
bindImageInput('img-katya','file-katya');
bindImageInput('img-indira','file-indira');
bindImageInput('img-joint','file-joint');

/* ===== GALLERY ===== */
let extraImages = LS.get('ki_extra_images', []); if(!Array.isArray(extraImages)) extraImages=[];
const thumbs=$('#thumbs'), addThumbBtn=$('#addThumbBtn'), addThumbInput=$('#addThumbInput');
function renderThumbs(){
  if(!thumbs) return; thumbs.innerHTML='';
  (extraImages||[]).forEach((src,i)=>{
    const d=document.createElement('div'); d.className='thumb';
    const im=new Image(); im.src=src; d.appendChild(im);
    const x=document.createElement('button'); x.className='close'; x.textContent='√ó';
    x.addEventListener('click',ev=>{ ev.stopPropagation(); extraImages.splice(i,1); LS.set('ki_extra_images',extraImages); renderThumbs(); toast('–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ'); });
    d.appendChild(x); thumbs.appendChild(d);
  });
  const add=document.createElement('div'); add.className='thumb add-thumb'; add.textContent='+'; add.title='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ';
  add.addEventListener('click',()=>addThumbInput.click()); thumbs.appendChild(add);
}
addThumbBtn?.addEventListener('click',()=>addThumbInput.click());
addThumbInput?.addEventListener('change',e=>{
  const arr=Array.from(e.target.files||[]); if(!arr.length) return;
  let done=0; arr.forEach(f=>{ const r=new FileReader(); r.onload=()=>{ extraImages.push(r.result); if(++done===arr.length){ LS.set('ki_extra_images',extraImages); renderThumbs(); toast('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã'); } }; r.readAsDataURL(f); });
  e.target.value='';
});
$('#resetThumbs')?.addEventListener('click',()=>{ if(!extraImages.length) return toast('–ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å'); if(confirm('–£–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–ø. —Ñ–æ—Ç–æ?')){ extraImages.length=0; localStorage.removeItem('ki_extra_images'); renderThumbs(); toast('–ì–∞–ª–µ—Ä–µ—è –æ—á–∏—â–µ–Ω–∞ üßπ'); }});
renderThumbs();

/* ===== CAROUSEL ===== */
const carTrack=$('#carTrack'), carWrap=$('#friendsCarousel');
let carCards = LS.get('ki_carousel_cards', []);
function uid(){return 'id-'+Math.random().toString(36).slice(2,9)}
function carCardHTML(c){
  return `<article class="c-card" data-id="${c.id}">
    <label class="avatar"><img src="${c.img}" alt="${c.name}"/></label>
    <div class="info">
      <div class="person-head">
        <h3 class="name">${c.name}</h3>
        <div class="badge-row">${c.medal?`<span class="badge">${c.medal}</span>`:''}</div>
      </div>
      <p class="role">${c.role||''}</p>
      <div class="controls compact">
        <button class="btn" onclick="toast('${c.name}: –º–µ–º—ã –≤—ã–≤–µ–¥–µ–Ω—ã üí∏')">–ö—ç—à</button>
        <button class="btn primary" onclick="toast('${c.name}: IPO —É–ª—ã–±–∫–∏! üéâ')">IPO</button>
        <button class="btn danger" data-del data-id="${c.id}">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
  </article>`;
}
function renderCarousel(){
  if(!carTrack) return;
  carTrack.innerHTML='';
  const list=(carCards||[]).slice();
  if(!list.length){ carTrack.innerHTML='<div class="hint">–î–æ–±–∞–≤—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤—ã—à–µ ‚Äî –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å üé†</div>'; return; }
  list.concat(list).forEach(c=>carTrack.insertAdjacentHTML('beforeend',carCardHTML(c)));
}
renderCarousel();
carTrack?.addEventListener('click',e=>{
  const btn = e.target.closest('[data-del]'); if(!btn) return;
  const id=btn.getAttribute('data-id'); const idx=carCards.findIndex(c=>c.id===id);
  if(idx>-1 && confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏?')){ carCards.splice(idx,1); LS.set('ki_carousel_cards',carCards); renderCarousel(); toast('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏'); }
});
let carOffset=0, carSpeed=0.6, carRAF=null;
function carStep(){
  if(!carTrack || !carTrack.firstElementChild) return;
  carOffset-=carSpeed; carTrack.style.transform=`translateX(${carOffset}px)`;
  const first=carTrack.firstElementChild;
  const fw=first.getBoundingClientRect().width+14;
  if(Math.abs(carOffset)>=fw){ carTrack.appendChild(first); carOffset+=fw; }
  carRAF=requestAnimationFrame(carStep);
}
function carPause(){ if(carRAF){ cancelAnimationFrame(carRAF); carRAF=null; } }
function carResume(){ if(!carRAF) carRAF=requestAnimationFrame(carStep); }
carWrap?.addEventListener('mouseenter',carPause);
carWrap?.addEventListener('mouseleave',carResume);
carResume();

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
const carRoleSel = document.getElementById('carRoleSel');
const carRoleCustom = document.getElementById('carRoleCustom');
const carMedalSel = document.getElementById('carMedalSel');
const carMedalCustom = document.getElementById('carMedalCustom');
const carPhoto = document.getElementById('carPhoto');
const carAddBtn = document.getElementById('carAddBtn');
let carPendingPhoto = null;

function roleValue(){ return (carRoleSel?.value === '__custom__') ? (carRoleCustom.value||'') : (carRoleSel?.value||''); }
function medalValue(){ return (carMedalSel?.value === '__custom__') ? (carMedalCustom.value||'') : (carMedalSel?.value||''); }

carRoleSel?.addEventListener('change', ()=>{ carRoleCustom.style.display = carRoleSel.value === '__custom__' ? 'inline-block' : 'none'; });
carMedalSel?.addEventListener('change', ()=>{ carMedalCustom.style.display = carMedalSel.value === '__custom__' ? 'inline-block' : 'none'; });
carPhoto?.addEventListener('change', e=>{ const f=e.target.files?.[0]; if(!f) return; const r=new FileReader(); r.onload=()=>carPendingPhoto=r.result; r.readAsDataURL(f); });
carAddBtn?.addEventListener('click',()=>{
  const name=($('#carName').value||'').trim(); if(!name) return toast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
  const role=(roleValue()||'').trim(); const medal=(medalValue()||'').trim();
  const img=carPendingPhoto||'images/3.png';
  carCards.push({id:uid(), name, role, medal, img});
  LS.set('ki_carousel_cards',carCards);
  carPendingPhoto=null; if(carPhoto) carPhoto.value='';
  renderCarousel(); toast('–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
});

/* ===== SHARE / COPY & EXPORT ===== */
$('#copyLink')?.addEventListener('click',async()=>{ try{ await navigator.clipboard.writeText(location.href); toast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ üìã'); }catch(e){ toast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'); } });
$('#shareBtn')?.addEventListener('click',async()=>{ if(navigator.share){ try{ await navigator.share({title:document.title,text:'–°–º–æ—Ç—Ä–∏: –ö–∞—Ç–∏–Ω–¥–∏—Ä–Ω–µ—Ç',url:location.href}); }catch(e){} } else toast('–®–µ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'); });
$('#exportMeme')?.addEventListener('click',()=>{ try{
  const stage=$('#memeStage'); if(!stage) return toast('–ù–µ—Ç –±–ª–æ–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω–∞');
  const rect=stage.getBoundingClientRect();
  const canvas=document.createElement('canvas'); canvas.width=Math.floor(rect.width*2); canvas.height=Math.floor(rect.height*2);
  const ctx=canvas.getContext('2d'); ctx.scale(2,2);
  const img=$('#img-joint'); if(!img) return toast('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  ctx.fillStyle='#0a0f14'; ctx.fillRect(0,0,rect.width,rect.height);
  ctx.drawImage(img,0,0,rect.width,rect.height);
  const text=(memeText && memeText.textContent)||'';
  ctx.font='900 18px Inter, system-ui, Arial'; ctx.fillStyle='rgba(0,0,0,.45)';
  const padX=12; const tw=ctx.measureText(text).width; const th=22;
  ctx.fillRect((rect.width-tw)/2 - padX, rect.height-10-th, tw+padX*2, th);
  ctx.fillStyle='#fff'; ctx.fillText(text, (rect.width-tw)/2, rect.height-13);
  const url=canvas.toDataURL('image/png'); const a=document.createElement('a'); a.href=url; a.download='katindirnet-meme.png'; a.click();
  toast('PNG —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
}catch(e){ toast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω'); }});

/* ===== TOOLS MODAL ===== */
const toolsModal=$('#toolsModal');
$('#openTools')?.addEventListener('click',()=>toolsModal.classList.add('show'));
$('#toolsClose')?.addEventListener('click',()=>toolsModal.classList.remove('show'));
toolsModal?.addEventListener('click',e=>{ if(e.target===toolsModal) toolsModal.classList.remove('show'); });

/* ===== CONTACTS MODAL ===== */
const contactsModal=$('#contactsModal');
$('#openContacts')?.addEventListener('click',()=>contactsModal.classList.add('show'));
$('#contactsClose')?.addEventListener('click',()=>contactsModal.classList.remove('show'));
contactsModal?.addEventListener('click',e=>{ if(e.target===contactsModal) contactsModal.classList.remove('show'); });

/* ===== BIO ===== */
const bioModal=$('#bioModal'), bioTitle=$('#bioTitle'), bioAbout=$('#bioAbout'), bioTags=$('#bioTags'), bioPhoto=$('#bioPhoto');
function openBio(cfg){
  bioTitle.textContent=(cfg.name||'BIO')+' ‚Äî BIO';
  bioAbout.textContent=cfg.about||'';
  bioTags.innerHTML='';
  (cfg.skills||[]).forEach(s=>{ const t=document.createElement('span'); t.className='tag'; t.textContent='#'+s; bioTags.appendChild(t); });
  if(cfg.photo){ bioPhoto.src=cfg.photo; bioPhoto.style.display='block'; bioPhoto.alt=cfg.name||'BIO'; }
  else { bioPhoto.style.display='none'; bioPhoto.removeAttribute('src'); }
  bioModal.classList.add('show');
}
$('#bioClose')?.addEventListener('click',()=>bioModal.classList.remove('show'));
bioModal?.addEventListener('click',e=>{ if(e.target===bioModal) bioModal.classList.remove('show'); });
// Remove legacy static founder bio.  The founder button now carries a
// data‚Äëbio attribute in the HTML, so the generic [data-bio] handler below
// will parse and display the biography.  Leaving this blank keeps
// compatibility with older browsers without causing duplicate handlers.
document.querySelectorAll('[data-bio]')?.forEach(btn=>{
  btn.addEventListener('click',()=>{
    try{
      const cfg = JSON.parse(btn.getAttribute('data-bio')||'{}');
      if(!cfg.photo){
        const card = btn.closest('.card');
        const img = card?.querySelector('.avatar img');
        if(img?.src) cfg.photo = img.src;
      }
      openBio(cfg);
    }catch(e){}
  });
});

/* ===== SETTINGS ===== */
const panel=$('#panel');
function togglePanel(force){ const show = (typeof force==='boolean')? force : !panel.classList.contains('show'); panel.classList.toggle('show', show); }
$('#fab')?.addEventListener('click',()=>togglePanel());
$('#openSettings')?.addEventListener('click',()=>togglePanel());
$('#closePanel')?.addEventListener('click',()=>togglePanel(false));

// –¢–µ–º–∞/–∞–∫—Ü–µ–Ω—Ç
const rootEl = document.documentElement;
const ACCENTS = {
  aqua:   ['#00d4ff','#6afc9c'],
  pink:   ['#ff5fb0','#ffd166'],
  violet: ['#a78bfa','#60a5fa'],
  lime:   ['#b7ff5a','#5efce8'],
  vanilla:['#ffd6a5','#caffbf'],
};
function applyAccent(name){
  const [a1,a2] = ACCENTS[name] || ACCENTS.aqua;
  rootEl.style.setProperty('--accent', a1);
  rootEl.style.setProperty('--accent2', a2);
  LS.set('ki_accent', name);
  document.querySelectorAll('[data-accent]').forEach(b=> b.classList.toggle('active', b.dataset.accent===name));
  syncThemeColorWithBg();
}
document.querySelectorAll('[data-accent]').forEach(b=> b.addEventListener('click', ()=>applyAccent(b.dataset.accent)));

// Zen
function applyZen(on){
  document.body.classList.toggle('zen', !!on);
  LS.set('ki_zen', !!on);
  $('#zenOn')?.classList.toggle('active', !!on);
  $('#zenOff')?.classList.toggle('active', !on);
  syncThemeColorWithBg();
}
$('#zenOn')?.addEventListener('click', ()=>applyZen(true));
$('#zenOff')?.addEventListener('click', ()=>applyZen(false));

// Sound
let audioCtx=null; let audioEnabled=LS.get('ki_sound',false); let volume=LS.get('ki_volume',0.6);
const sfx=document.getElementById('sfx'); if(sfx){ sfx.volume=volume; sfx.loop=true; }
$('#vol')?.addEventListener('input',e=>{ volume=parseFloat(e.target.value)||0; LS.set('ki_volume',volume); if(sfx) sfx.volume=volume; });
function ensureCtx(){ if(!audioCtx){ try{ audioCtx=new (window.AudioContext||window.webkitAudioContext)(); }catch(e){ audioCtx=null; } } return audioCtx; }
function startMusic(){ if(!sfx) return; if(sfx.paused){ const p=sfx.play(); if(p?.catch) p.catch(()=>{}); } }
function stopMusic(){ if(!sfx) return; try{sfx.pause();}catch(e){} }
function playSfx(){ if(audioEnabled) startMusic(); }
function setSound(on){ audioEnabled=on; LS.set('ki_sound',on); $('#soundOn')?.classList.toggle('active',on); $('#soundOff')?.classList.toggle('active',!on); if(on){ startMusic(); ensureCtx() && audioCtx.state==='suspended' && audioCtx.resume(); toast('–ú—É–∑—ã–∫–∞ ‚ñ∂Ô∏è'); } else { stopMusic(); toast('–ú—É–∑—ã–∫–∞ ‚è∏'); } }
$('#soundOn')?.addEventListener('click',()=>setSound(true));
$('#soundOff')?.addEventListener('click',()=>setSound(false));

// Cats toggle + density
function setCats(on){ on?startCats():stopCats(); LS.set('ki_cats',on); $('#catsOn')?.classList.toggle('active',on); $('#catsOff')?.classList.toggle('active',!on); }
$('#catsOn')?.addEventListener('click',()=>setCats(true));
$('#catsOff')?.addEventListener('click',()=>setCats(false));
$('#catsDensity')?.addEventListener('input',e=>{
  catsDelay=+e.target.value||260; LS.set('ki_cats_density',catsDelay);
  if(catsTimer){ stopCats(); startCats(); }
});

// Ticker speed
function setTickerSpeed(sec){
  const s = Math.max(8, Math.min(40, +sec||24));
  const track = document.querySelector('.ticker-track');
  if(track) track.style.animationDuration = s + 's';
  LS.set('ki_ticker_speed', s);
}
$('#tickerSpeed')?.addEventListener('input', e=> setTickerSpeed(e.target.value));

// Reset
$('#resetSettings')?.addEventListener('click', ()=>{
  if(!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?')) return;
  ['ki_theme','ki_accent','ki_zen','ki_cats','ki_cats_density','ki_sound','ki_volume','ki_ticker_speed'].forEach(k=> localStorage.removeItem(k));
  applyTheme('neon'); applyAccent('aqua'); applyZen(false); setCats(true); setSound(false); setTickerSpeed(24);
  $('#catsDensity').value = 260; catsDelay=260;
  $('#vol').value = 0.6;
  $('#tickerSpeed').value = 24;
  toast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
});

/* ===== INIT ===== */
(function init(){
  try{
    applyAccent(LS.get('ki_accent','aqua'));
    applyZen(LS.get('ki_zen', false));
    setCats(LS.get('ki_cats', true)); if(LS.get('ki_cats', true)) startCats();
    setSound(LS.get('ki_sound', false));

    const catsDensityEl = $('#catsDensity'); if(catsDensityEl){ catsDensityEl.value = LS.get('ki_cats_density', 260); catsDelay = +catsDensityEl.value; }
    const volEl = $('#vol'); if(volEl){ volEl.value = LS.get('ki_volume', 0.6); }
    const speedEl = $('#tickerSpeed'); if(speedEl){ speedEl.value = LS.get('ki_ticker_speed', 24); }
    setTickerSpeed(LS.get('ki_ticker_speed', 24));

    syncThemeColorWithBg();
  }catch(e){ console.error(e); toast('Init error'); }
})();
